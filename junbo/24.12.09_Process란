1. 프로세스가 뭔가요?
메모리에 로드되어 실행 중인 프로그램을 일컬으며, OS 가 처리하는 작업의 단위를 말합니다
프로세스를 처리하기 위해서는 CPU(프로세서), 메모리, 파일, I/O 장치 등이 필요합니다
OS 는 프로세스의 처리 순서와 자원 분배를 담당하는 역할을 합니다

2. 프로세스의 생명주기에 대해서 설명해보세요
프로세스는 상태에 따라서 크게 5가지로 구분할 수 있습니다.
(1) new 상태는 프로세스가 새로 생성된 상태를 의미합니다. 생성된 프로세스는 ready 상태로 전환되게 됩니다
(2) ready 상태는 CPU 의 처리를 대기하는 상태를 의미합니다. ready 상태의 프로세스들은 ready queue 에 들어가서 처리 순서를 기다리게 됩니다
(3) running 상태는 CPU 에 의해서 프로세스가 처리 중인 상태를 의미합니다. running 상태에서 CPU 는 프로세스명령어를 읽고 해당 명령을 실행합니다.
(4) waiting 상태는 I/O 작업 응답을 기다리거나, 이벤트 완료를 대기하는 상태를 의미합니다. waiting 상태의 프로세스들도 ready 상태와 비슷하게 각 I/O 장치, 이벤트 waiting queue 에 들어가서 순서대로 처리를 기다립니다.
처리가 완료된 프로세스는 다시 ready queue 에 들어가게 됩니다.
(5) terminated 상태는 마지막 코드의 실행이 끝나거나, exit() 과 같은 시스템 콜로 프로세스가 종료될 때를 의미합니다. 이 상태에서 OS 는 프로세스의 PCB, 메모리 자원이나 페리퍼럴 장치 파일들을 정리합니다.

또한 프로세스의 위계와 관련하여 zombie 와 orphan 2가지 상태가 더 존재합니다.

2-1. zombie 상태와 orphan 상태가 뭐죠?
프로세스 처리 중에 시스템 콜을 사용하여 하위 프로세스를 생성하는 것이 가능합니다.
CPU 가 프로세스를 처리하다가 fork() 를 만나면 처리 중인 프로세스는 상위 프로세스가 되고, 상위 프로세스의 메모리 내부 정보를 복사해서 새로 하위 프로세스를 만들게 됩니다.
상위 프로세스는 하위 프로세스가 terminate 되면 종료 여부를 OS 로 전달해 OS 가 자원을 정리하게끔 신호합니다.

그러나 때로 상위 프로세스가 다른 작업을 처리 중이라면 신호를 보내지 못하는 경우가 있습니다. 이 경우 하위 프로세스는 terminated 상태가 되지 못하고 zombie 상태가 됩니다. zombie 프로세스는 OS 의 프로세스 스케줄링 테이블에 남아서 시스템의 안정성과 성능에 악영향을 줍니다.

이와 달리 상위 프로세스가 하위 프로세스 종료 전에 먼저 terminated 된다면, 이 경우 하위 프로세스는 orphan 상태가 됩니다. 이 경우에는 OS 의 첫번째 프로세스인 init 하위 프로세스로 자동 할당되어 관리되게 됩니다. 다만 하위 프로세스가 독립적으로 동작하게끔 설계된 것이라면 괜찮겠지만, 상위 프로세스의 비정상 종료로 인해 orphan 상태가 된다면 확인이 필요합니다.

3. 멀티 프로세싱에 대해서 설명해보시겠어요?
CPU 는 기본적으로 연산 속도가 메모리나 기타 페리퍼럴에 비해서 매우 빠릅니다
즉, 다른 장치의 응답을 기다리거나, 메모리 저장과 로드를 기다리는 동안 CPU 가 놀게 됩니다.
따라서 CPU 사용 효율을 최대화하기 위해서 CPU 할당 시간을 나누어 여러 개 프로세스를 처리하는 것이 멀티 프로세싱입니다.

멀티 프로세싱을 하기 위해서는 여러 개의 프로세스를 어떻게 순차적으로 처리하는지 계획하는 것이 중요합니다. 이를 스케줄링이라고 하며, OS 가 프로세스의 CPU 점유 순서를 정해줍니다. 일반적으로 스케줄링을 개발자가 직접 제어할 방법은 없고, OS 가 프로세스의 중요도, 실행시간 등을 비교하여 적절하게 작성합니다.

멀티 프로세싱에서 한 프로세스에서 다른 프로세스로 CPU 의 점유가 넘어가는 것을 context switching 이라고 합니다.

3-1. context switching 에 대해서 설명해보세요
현재 처리 중인 프로세스의 ID, 프로세스의 상태, 프로그램 카운터(실행 중인 명령어의 주소), 프로세스가 사용중인 메모리에 대한 정보 등을 context 라고 부릅니다.

만약 A 라는 프로세스를 현재 처리 중이고, B 라는 프로세스가 ready queue 에 들어가있다고 가정해보겠습니다
OS 는 스케줄에 따라서 A 에서 B 로 전환하고자 합니다.
이 경우 현재 CPU 가 처리 중인 A 프로세스의 context(데이터) 를 PCB 라는 데이터 구조로 만들어 메모리에 저장하고 B 프로세스와 관련된 context 를 새로 읽어들여 B 프로세스를 처리하기 시작합니다.
만약 다시 B 에서 A 로 전환이 일어날 경우에는 CPU 는 현재 B 프로세스 관련 context 를 다시 PCB 형태로 메모리에 저장하고 A 프로세스의 PCB 를 읽고 처리를 시작하게 됩니다.

이 일련의 과정을 context switching 이라 일컫습니다
