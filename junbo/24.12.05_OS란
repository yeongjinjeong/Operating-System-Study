1. 컴퓨터와 계산기는 어떻게 다른가요?
-계산기는 사칙연산이라는 한가지 기능 수행에 초점을 맞추었다
-컴퓨터는 정보를 처리할 수 있는 HW 를 기초로, HW 의 기능을 수행하게끔하는 다양한 프로그램을 구동시켜서 여러가지 기능을 수행할 수 있다
-즉, 컴퓨터는 다른 기기와 달리 범용적으로 사용할 수 있는 HW 를 지녀서 프로그램에 따라서 다양한 기능을 수행한다

1-1. 컴퓨터의 구조에 대해서 설명해보세요
-컴퓨터 구조는 폰 노이만 아키텍처에 따라 크게 3가지로 나누어진다
-1. 연산 명령어, 연산에 필요한 데이터, 연산 결과를 저장하는 메모리
-2. 연산, 제어, 데이터 전송을 담당하는 CPU (프로세서)
-3. 세부적인 연산 명령이 담긴 프로그램
-폰 노이만 아키텍처는 HW 를 바꿀 필요없이 프로그램만 바꾸면 다른 기능을 수행할 수 있다는 장점이 있다
-그러나 CPU 와 메모리 간의 연산 속도에 차이가 있어서 CPU 의 성능을 효율적으로 사용할 수 없다는 단점이 있다
-현대 컴퓨터에서는 CPU 내부에 CPU-메모리 간의 속도 차이를 완충하는 명령어 레지스터나 캐시 메모리를 두어 병목현상을 최소화한다

1-2. CPU 에 대해서 설명해보세요
-CPU 는 컴퓨터에서 연산을 담당하는 HW 로 코어, 캐시 메모리, 레지스터 등으로 구성된다
-현대 컴퓨터에서는 한 개의 CPU 내에 여러 개의 코어를 사용하는 경우도 많으며, 이를 멀티 코어 CPU라고 일컫는다


2. 프로그램은 뭔가요?
-프로그램은 컴퓨터가 수행할 명령어의 집합을 말한다
-프로그래머가 작성한 소스코드를 컴파일 및 링킹하면 실행파일 형태로 프로그램이 만들어지며, 이를 HDD 나 SSD 와 같은 저장장치에 저장한다
-프로그램을 실행하면 메모리에 적재(로드)되는데, 이 상태를 프로세스라고 일컫는다
-그림판, 메모장, 카카오톡, 게임 등과 같은 응용프로그램부터, 응용프로그램 실행 및 처리와 HW 제어를 중간에서 관리하는 OS도 프로그램이다

2-1. 컴파일과 링킹에 대해 설명해보세요
-컴파일은 소스코드를 오브젝트 파일 형태로 변환하는 과정을 의미한다
-전처리 지시문을 처리하고 해당 헤더파일을 삽입한다
-구문을 분석하고 문법오류 탐지 및 중간 코드를 생성한다
-중간 코드를 최적화하고 결과물을 오브젝트 파일(목적 파일) 형태로 반환한다

-링킹은 오브젝트 파일을 실행 파일 형태로 변환하는 과정을 의미한다
-오브젝트 파일 내부의 함수나 변수(심볼)의 주소를 할당하여 실행 파일에서 참조할 수 있게 한다
-오브젝트 파일에서 호출한 외부함수의 구현부를 라이브러리에서 찾아서 연결한다


3. OS 가 뭔가요?
-OS 는 HW 와 프로그램 (SW) 사이에서 실행과 처리를 효율적으로 관리하는 프로그램이다
-OS 는 사용자가 컴퓨터를 제어할 수 있는 인터페이스를 제공한다
-Windows, MacOS, Linux, Android, iOS 등이 있다
-OS 에서 HW 제어 및 효율적인 자원 할당, SW 실행 및 처리를 담당하는 부분을 Kernel 이라 부른다
-사용자가 OS 와 상호작용할 수 있는 인터페이스 부분을 Shell 이라 부른다
-사용자의 명령이나 응용프로그램은 직접적으로 HW 를 제어할 수 없으며, Kernel 에 System Call 을 사용하여 처리를 요청해야 한다
-다시 말하면 OS 는 사용자 공간과 Kernel 공간으로 분리되어 있으며, 이는 잘못된 요청이나 접근에도 시스템의 안정적 동작을 보장한다

3-1. System Call 에 대해 설명해보세요
-System Call 은 사용자 또는 응용프로그램이 Kernel 의 기능을 요청하기 위해 사용하는 API 이다
-이를 통해서 파일 작업, 프로세스 제어, 메모리 관리 등과 같은 HW 자원에 접근할 수 있다


4. VMM 이 뭔가요?
-VMM 은 Virual Machine Manager 의 약자로, 가상환경(VM)을 관리하는 프로그램이다
-VMM 은 가상환경(VM) 을 생성하고 여러 가상환경이 독립적으로 동작할 수 있도록 보장한다
-즉, 하나의 HW 상에 여러 개의 OS 를 동시에 동작시킬 수 있으며, 이를 효율적으로 관리하는 것이 VMM 이다

4-1. 왜 가상환경을 사용하나요?
-하나의 컴퓨터, HW 자원을 효율적으로 사용할 수 있기 때문이다
-여러 OS 를 동시에 동작시킬 수 있기 때문이다
-각 가상환경은 독립적으로 분리되어 있으므로 다른 환경에 영향을 주지 않기 때문이다
