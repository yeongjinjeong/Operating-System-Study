1. IPC 가 뭔가요?
Inter-Process Communication 의 약자로, 프로세스 간의 통신, 데이터 송수신을 의미합니다
IPC 는 공유메모리 방식과 메시지 전달(메시지 큐) 방식으로 나눠볼 수 있습니다

(1) 공유메모리 방식에 대해서 설명해 보세요
공유메모리 방식은, 송신 프로세스와 수신 프로세스 간에 공유할 메모리 공간을 만들고 
그 공간에서 데이터를 넣고 데이터를 읽어오는 방식입니다

메모리 내부에는 데이터를 저장할 버퍼 배열을 두고, 저장된 데이터의 끝을 알려주는 인덱스로 구성됩니다.

송신 프로세스에서는 데이터 버퍼의 남는 공간을 확인하여 데이터를 저장하며,
수신 프로세스에서는 데이터 버퍼에 데이터가 존재할 경우에만 데이터를 읽어옵니다.

공유메모리 방식은 공유된 메모리에서 직접 데이터를 저장, 읽어오기에 오버헤드가 후술할 메시지 큐 방식에 비해 적다는 장점이 있습니다.

그러나 동시에, 프로그래머가 공유메모리와 관련한 코드를 직접 명시적으로 작성하므로
송신 프로세스와 수신 프로세스 수가 늘어나면, 메모리 관리가 어려워지고 구조가 복잡해진다는 단점이 있습니다.

(2) 메시지 큐 방식은 뭔가요
메시지 큐 방식은 OS 가 프로세스 간의 데이터 송수신을 담당하는 방식입니다.
송신 프로세스에서 send() 와 같은 시스템 콜을 사용하여 OS 에게 데이터를 전달하고
수신 프로세스에서는 receive() 와 같은 시스템 콜을 사용하여 OS 로부터 데이터를 수신 받습니다.

공유메모리 방식과 달리, OS 에서 데이터를 적절히 처리해주기 때문에 프로그래머의 부담이 덜어지고 구조적 확장성이 높은 장점이 있지만, 
커널 공간으로 데이터를 복사해야 한다는 오버헤드가 존재합니다

공유메모리 방식에서는 각각의 송수신 프로세스가 공유하는 메모리가 존재하므로 송수신자를 지정해줄 필요가 없었지만, 
메시지 큐 방식에서는 OS 를 거치기 때문에 데이터를 보내는 곳과 데이터를 받는 곳을 명시해야 합니다.

(1) direct link
direct link 는 시스템 콜에 상대 프로세스를 명시된 커뮤니케이션 링크(두 장치, 시스템 간의 데이터 전달을 위한 유무형의 경로)를 의미합니다

메시지 큐의 direct link 는 한 쌍의 송수신 프로세스 사이에 하나의 커뮤니케이션 링크가 생기며,
두 프로세스 간의 메시지 전달 속도가 빠르지만, 프로세스 수가 늘어나면 관리와 구조 확장이 어렵습니다

(2) indirect link
indirect link 형태는 시스템 콜에 상대 프로세스를 명시하는 대신, 매개체 명시하여 서로 데이터를 주고 받게됩니다

이 매개체를 port 라 하며, 메시지 큐의 indirect link 에서 OS 는 port 를 관리하는 역할을 수행합니다

OS 는 포트를 생성하고 시스템 콜 명령(send, receive)을 처리하며, 데이터 전송이 완료된 후에는 port 를 닫아 보안 약점을 최소화합니다

indirect link 는 direct link 와 달리 프로세스 간의 링크가 여러 개 생긴다는 특징이 존재합니다



2. IPC 에서의 동기, 비동기에 대해서 설명해보세요
각각 송신과 수신 측면에서 설명해 볼 수 있습니다

동기적 송신일 경우, 송신 프로세스는 메시지를 보내고 수신 프로세스가 수신 완료할 때까지 대기합니다. 이를 block sending 라고 부릅니다
반면 동기적 수신일 경우, 수신 프로세스는 메시지가 송신될 때까지 대기하며, 메시지를 받아 처리합니다. 이를 block receiving 이라 부릅니다

비동기적 송신일 경우, 송신 프로세스는 메시지를 보내고 다른 작업을 수행합니다.
즉, 수신 여부를 확인하지 않으며 이를 non-block sending 이라 부릅니다
비동기적 수신일 경우, 수신 프로세스는 다른 작업을 병행하여 수행하다가 메시지가 들어오면 처리합니다. 이를 non-blocking receiving 이라 부릅니다

동기적 방식은 메시지의 수신을 보장한다는 장점이 있지만, 처리 완료까지 프로세스들이 대기하므로 처리 속도가 비교적 느립니다
비동기적 방식은 메시지의 송수신이 불명확하다는 단점이 있지만, 프로세스들이 중간 중간 다른 작업도 병행하여 효율적으로 동작한다는 장점도 있습니다 



3. IPC 와 네트워크 통신에 대해서 차이점을 설명해보세요
IPC 는 한 컴퓨터 내부에서 프로세스 간 통신을 의미합니다.
반면 네트워크 통신은 컴퓨터와 컴퓨터를 연결하는 통신을 의미합니다

네트워크의 대표적인 예시로는 소켓 통신을 들 수 있습니다
소켓 통신에서 socket 은 네트워크 통신에서의 종단점을 의미합니다
socket 은 컴퓨터의 ip 주소와 프로세스의 port 번호를 조합하여 통신 상대를 식별하고 데이터 송수신에 사용됩니다
socket 은 OS 에 의해 관리되며, 시스템 콜을 통해 사용할 수 있습니다

3-1. 소켓통신을 사용한 서버-클라이언트의 통신을 설명해보세요
(1)서버측
1. 시스템 콜을 사용하여 소켓을 생성(socket)합니다
2. ip 주소와 port 번호를 바인딩(bind)합니다
3. 클라이언트 대기열을 생성하고 클라이언트의 연결을 대기합니다(listen)
4. 클라이언트의 연결요청을 수락(accept)합니다
5. 필요에 따라 데이터를 송수신 합니다(send, receive)
6. 통신이 완료되면 소켓을 닫습니다(close)

(2)클라이언트 측
1. 소켓을 생성(socket)합니다
2. 서버의 ip 주소와 port 번호를 통해 연결을 요청합니다(connect)
3. 서버에 연결이 되면, 필요에 따라 데이터를 송수신 합니다(send, receive)
4. 통신이 완료되면 소켓을 닫습니다(close)



4. RPC 가 뭔가요?
RPC 는 Remote Procedure Call 의 약자로, 프로세스 외부에서 함수를 원격으로 호출하는 것을 의미합니다.
RPC 를 통해서 같은 PC 내부의 다른 프로세스(IPC)나 다른 PC 의 프로세스의 동작(네트워크 통신)을 실행할 수 있습니다
